# -*- coding: utf-8 -*-
"""CardioPredict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nk5s9PfOO-7g1MVDdfn7HrusAjSAiUSk

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score, confusion_matrix

"""Data Collection and Processing"""

# loading the csv data to a Pandas DataFrame
heart_data = pd.read_csv('/content/data.csv')

# print first 5 rows of the dataset
heart_data.head()

# print last 5 rows of the dataset
heart_data.tail()

# number of rows and columns in the dataset
heart_data.shape

# getting some info about the data
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

# statistical measures about the data
heart_data.describe()

# checking the distribution of Target Variable
heart_data['target'].value_counts()

"""1 --> Defective Heart

0 --> Healthy Heart
"""

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""Splitting the Data into Training data & Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# training the LogisticRegression model with Training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ', test_data_accuracy)

"""Precision Score"""

# Precision on training data
train_data_precision = precision_score(Y_train, X_train_prediction)
print('Precision on Training data:', train_data_precision)

# Precision on test data
test_data_precision = precision_score(Y_test, X_test_prediction)
print('Precision on Test data:', test_data_precision)

"""Recall"""

# Recall on training data
train_data_recall = recall_score(Y_train, X_train_prediction)
print('Recall on Training data:', train_data_recall)

# Recall on test data
test_data_recall = recall_score(Y_test, X_test_prediction)
print('Recall on Test data:', test_data_recall)

"""Specificity"""

# Specificity on training data
tn_train, fp_train, _, _ = confusion_matrix(Y_train, X_train_prediction).ravel()
train_data_specificity = tn_train / (tn_train + fp_train)
print('Specificity on Training data:', train_data_specificity)

# Specificity on test data
tn, fp, fn, tp = confusion_matrix(Y_test, X_test_prediction).ravel()
test_data_specificity = tn / (tn + fp)
print('Specificity on Test data:', test_data_specificity)

"""Building a Predictive System"""

import ipywidgets as widgets
from IPython.display import display
import numpy as np  # Add this import statement

# Create input widgets
age = widgets.IntText(description="Age:", value=44)
sex = widgets.Dropdown(options=[('Female', 0), ('Male', 1)], description="Sex:")
cp = widgets.Dropdown(options=[('0', 0), ('1', 1), ('2', 2), ('3', 3)], description="Chest Pain Type:")
trestbps = widgets.IntText(description="Resting Blood Pressure:", value=125)
chol = widgets.IntText(description="Serum Cholesterol:", value=210)
fbs = widgets.Dropdown(options=[('0', 0), ('1', 1)], description="Fasting Blood Sugar > 120 mg/dl:")
restecg = widgets.Dropdown(options=[('0', 0), ('1', 1), ('2', 2)], description="Resting Electrocardiographic Results:")
thalach = widgets.IntText(description="Maximum Heart Rate Achieved:", value=148)
exang = widgets.Dropdown(options=[('0', 0), ('1', 1)], description="Exercise Induced Angina:")
oldpeak = widgets.FloatText(description="ST Depression Induced by Exercise Relative to Rest:", value=1.0)
slope = widgets.Dropdown(options=[('0', 0), ('1', 1), ('2', 2)], description="Slope of the Peak Exercise ST Segment:")
ca = widgets.IntText(description="Number of Major Vessels Colored by Fluoroscopy:", value=0)
thal = widgets.Dropdown(options=[('0', 0), ('1', 1), ('2', 2), ('3', 3)], description="Thalassemia:")

# Create a button
button = widgets.Button(description="Predict")

# Display the widgets
display(age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal, button)

# Define a function to handle button click
def predict_click(b):
    # Fetch input values
    input_data = np.array([
        age.value, sex.value, cp.value, trestbps.value, chol.value,
        fbs.value, restecg.value, thalach.value, exang.value,
        oldpeak.value, slope.value, ca.value, thal.value
    ]).reshape(1, -1)

    # Make prediction using your model
    prediction = model.predict(input_data)

    # Display the prediction result
    if prediction[0] == 0:
        print('The Person does not have a Heart Disease')
    else:
        print('The Person has Heart Disease')

# Attach the function to the button's click event
button.on_click(predict_click)

